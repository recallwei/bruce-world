generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("BRUCE_WORLD_DATABASE_URL")
  shadowDatabaseUrl = env("BRUCE_WORLD_SHADOW_DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(3)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(3)
  username  String    @unique
  password  String?
  email     String?   @unique
  name      String?
  avatarUrl String?   @map("avatar_url")
  biography String?
  location  String?
  role      Role      @default(USER)
  auths     Auth[]
  notes     Note[]
  tags      Tag[]
  themes    Theme[]

  @@map("user")
}

enum Role {
  ADMIN      @map("admin")
  USER       @map("user")
  MEMBERSHIP @map("membership")
  BETA       @map("beta")

  @@map("role")
}

model Auth {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt   DateTime? @updatedAt @map("updated_at") @db.Timestamp(3)
  deletedAt   DateTime? @map("deleted_at") @db.Timestamp(3)
  authType    AuthType  @map("auth_type")
  accessToken String    @map("access_token")
  openId      Int       @unique @map("open_id")
  userId      Int       @map("user_id")
  User        User      @relation(fields: [userId], references: [id])

  @@map("auth")
}

enum AuthType {
  GITHUB @map("github")
  GOOGLE @map("google")

  @@map("auth_type")
}

model Note {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt   DateTime? @updatedAt @map("updated_at") @db.Timestamp(3)
  finishedAt  DateTime? @map("finished_at") @db.Timestamp(3)
  deletedAt   DateTime? @map("deleted_at") @db.Timestamp(3)
  name        String?
  description String?
  priority    Int?      @default(0)
  index       Int       @default(0)
  toped       Boolean   @default(false)
  archived    Boolean   @default(false)
  tasks       Task[]
  tags        Tag[]
  themes      Theme[]
  userId      Int       @map("user_id")
  User        User      @relation(fields: [userId], references: [id])

  @@map("note")
}

model Task {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt  DateTime? @updatedAt @map("updated_at") @db.Timestamp(3)
  finishedAt DateTime? @map("finished_at") @db.Timestamp(3)
  deletedAt  DateTime? @map("deleted_at") @db.Timestamp(3)
  content    String?
  linkUrl    String?   @map("link_url")
  index      Int       @default(0)
  noteId     Int       @map("note_id")
  Note       Note      @relation(fields: [noteId], references: [id])

  @@map("task")
}

model Tag {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(3)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(3)
  index     Int       @default(0)
  userId    Int       @map("user_id")
  User      User      @relation(fields: [userId], references: [id])
  noteId    Int       @map("note_id")
  Note      Note      @relation(fields: [noteId], references: [id])

  @@map("tag")
}

model Theme {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(3)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamp(3)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(3)
  index     Int       @default(0)
  userId    Int       @map("user_id")
  User      User      @relation(fields: [userId], references: [id])
  noteId    Int       @map("note_id")
  Note      Note      @relation(fields: [noteId], references: [id])

  @@map("theme")
}
